import React, { useState, useCallback, useEffect } from 'react';
import { Plus, Trash2, Check, Calendar, Clock, Lightbulb, RefreshCw, ChevronLeft, ChevronRight, LogOut, User } from 'lucide-react';
import { saveUserData, loadUserData } from './lib/supabase';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const AuthForm = ({ onLogin }: { onLogin: (userId: string) => void }) => {
  const [userId, setUserId] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async () => {
    const trimmedId = userId.trim();
    if (!trimmedId) {
      alert('–í–≤–µ–¥–∏—Ç–µ User ID');
      return;
    }
    
    setIsLoading(true);
    try {
      localStorage.setItem('userId', trimmedId);
      await loadUserData();
      onLogin(trimmedId);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ User ID.');
      localStorage.removeItem('userId');
    }
    setIsLoading(false);
  };

  const handleRegister = async () => {
    setIsLoading(true);
    const newUserId = 'user_' + Math.random().toString(36).substr(2, 12);
    
    try {
      localStorage.setItem('userId', newUserId);
      await saveUserData({
        tasksByDate: {},
        noDeadlineTasks: [],
        ideas: [],
        dailyTasks: [],
        completedRegularTasks: {},
        regularTasksOrder: {}
      });
      onLogin(newUserId);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      localStorage.removeItem('userId');
    }
    setIsLoading(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center p-6">
      <div className="bg-white rounded-xl shadow-xl p-8 w-full max-w-md">
        <div className="text-center mb-8">
          <div className="text-4xl mb-4">üìã</div>
          <h1 className="text-2xl font-bold text-slate-800 mb-2">–¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á</h1>
          <p className="text-slate-600">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        </div>

        <div className="space-y-4">
          <button
            onClick={handleRegister}
            disabled={isLoading}
            className="w-full py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors font-medium text-lg"
          >
            {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...' : 'üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç'}
          </button>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-slate-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-slate-500">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</span>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-2">
              User ID –¥–ª—è –≤—Ö–æ–¥–∞
            </label>
            <input
              type="text"
              value={userId}
              onChange={(e) => setUserId(e.target.value)}
              placeholder="user_example123"
              className="w-full px-4 py-3 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              onKeyDown={(e) => e.key === 'Enter' && handleLogin()}
              disabled={isLoading}
            />
          </div>

          <button
            onClick={handleLogin}
            disabled={isLoading || !userId.trim()}
            className="w-full py-3 bg-slate-600 text-white rounded-lg hover:bg-slate-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors font-medium"
          >
            {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID'}
          </button>
        </div>
      </div>
    </div>
  );
};

// –•—É–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const useAuth = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      const storedUserId = localStorage.getItem('userId');
      if (storedUserId) {
        try {
          await loadUserData();
          setCurrentUserId(storedUserId);
          setIsLoggedIn(true);
        } catch (error) {
          localStorage.removeItem('userId');
        }
      }
      setIsLoading(false);
    };

    checkAuth();
  }, []);

  const login = useCallback((userId: string) => {
    setCurrentUserId(userId);
    setIsLoggedIn(true);
  }, []);

  const logout = useCallback(() => {
    localStorage.clear();
    setCurrentUserId(null);
    setIsLoggedIn(false);
    window.location.reload();
  }, []);

  return { isLoggedIn, currentUserId, isLoading, login, logout };
};

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
const useSupabaseStorage = (key: string, defaultValue: any) => {
  const [value, setValue] = useState(defaultValue);
  const [isLoaded, setIsLoaded] = useState(false);

  useEffect(() => {
    const loadData = async () => {
      try {
        const userData = await loadUserData();
        if (userData && userData[key]) {
          setValue(userData[key]);
        }
        setIsLoaded(true);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}:`, error);
        setIsLoaded(true);
      }
    };
    
    loadData();
  }, [key]);

  const setStoredValue = useCallback(async (newValue: any) => {
    try {
      setValue((currentValue: any) => {
        const valueToStore = typeof newValue === 'function' ? newValue(currentValue) : newValue;
        
        setTimeout(async () => {
          try {
            const userData = await loadUserData() || {};
            userData[key] = valueToStore;
            await saveUserData(userData);
            console.log(`‚úÖ ${key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –æ–±–ª–∞–∫–µ`);
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${key}:`, error);
          }
        }, 100);
        
        return valueToStore;
      });
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${key}:`, error);
    }
  }, [key]);

  return [value, setStoredValue, isLoaded];
};

// –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
const TaskItem = ({ task, canToggle = true, onToggle, onDelete }: any) => (
  <div className="flex items-center gap-3 p-3 rounded-lg border bg-white hover:shadow-sm transition-all">
    {canToggle && (
      <button
        onClick={() => onToggle(task.id)}
        className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors ${
          task.completed
            ? 'bg-green-500 border-green-500 text-white'
            : 'border-gray-300 hover:border-blue-500'
        }`}
      >
        {task.completed && <Check className="w-4 h-4" />}
      </button>
    )}
    
    <span className="text-lg">{task.emoji}</span>
    
    <div className="flex-1">
      <span className={`${task.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>
        {task.text}
      </span>
      {task.isRegular && (
        <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
          —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è
        </span>
      )}
    </div>
    
    <button
      onClick={() => onDelete(task.id)}
      className="flex-shrink-0 p-1 text-gray-400 hover:text-red-500 transition-colors"
    >
      <Trash2 className="w-4 h-4" />
    </button>
  </div>
);

const AddTaskForm = ({ onAdd, text, setText, date, setDate }: any) => (
  <div className="bg-gray-50 p-4 rounded-lg">
    <div className="flex gap-2">
      <input
        type="text"
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞..."
        className="flex-1 px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
        onKeyDown={(e) => e.key === 'Enter' && onAdd()}
      />
      <input
        type="date"
        value={date}
        onChange={(e) => setDate(e.target.value)}
        className="px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <button
        onClick={onAdd}
        disabled={!text.trim()}
        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300 transition-colors"
      >
        <Plus className="w-4 h-4" />
      </button>
    </div>
  </div>
);

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function App() {
  const { isLoggedIn, currentUserId, isLoading, login, logout } = useAuth();
  
  const [activeTab, setActiveTab] = useState('today');
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  
  const [tasksByDate, setTasksByDate] = useSupabaseStorage('tasksByDate', {
    [new Date().toISOString().split('T')[0]]: [
      { id: 1, text: '–ü–æ–¥—ä–µ–º', completed: true, emoji: 'üåÖ' },
      { id: 2, text: '–£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞', completed: true, emoji: '‚òÄÔ∏è' },
      { id: 3, text: '–ö–∞—Ä–¥–∏–æ + –±–∞—Å—Å–µ–π–Ω', completed: true, emoji: 'üèä‚Äç‚ôÇÔ∏è' },
      { id: 4, text: '–ê—à–≤–∞–≥–∞–Ω–¥–∞ + –≤–∏—Ç–∞–º–∏–Ω D', completed: false, emoji: 'üíä' },
      { id: 5, text: '–ü–æ—Å—Ç—ã –¥–ª—è –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—è', completed: false, emoji: 'üè†' },
      { id: 6, text: '–ü–æ—Å—Ç—ã –¥–ª—è –†–æ—Å—Ç–æ–≤–∞', completed: false, emoji: 'üè†' },
      { id: 7, text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –†–°–Ø', completed: false, emoji: 'üíª' },
      { id: 8, text: '–ó–∞—è–≤–ª–µ–Ω–∏–µ ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', completed: false, emoji: 'üìã' }
    ]
  });

  const [noDeadlineTasks, setNoDeadlineTasks] = useSupabaseStorage('noDeadlineTasks', [
    { id: 101, text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ –∑–∞–ø—É—Å–∫—É —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª-–∞—Ñ–∏—à—É', emoji: 'üì∫' },
    { id: 102, text: '–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –†–ö–ù –≤ –¢—é–º–µ–Ω–∏ (–∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å)', emoji: '‚öôÔ∏è' },
    { id: 103, text: '–£–∑–Ω–∞—Ç—å –ø—Ä–æ –ø–æ—á–∏–Ω–∫—É –±–∞–π–∫–∞', emoji: 'üèçÔ∏è' },
    { id: 104, text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É', emoji: 'ü¶∑' },
    { id: 105, text: '–°–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã (–æ—Ä–∏–µ–Ω—Ç–∏—Ä ‚Äî 4 –∏—é–Ω—è)', emoji: 'üß™' },
    { id: 106, text: '–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Å —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º–∏', emoji: 'üíº' },
    { id: 107, text: '–†–µ—à–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –†–æ—Å—Ç–æ–≤–æ–º (–µ—Å–ª–∏ –Ω–µ –æ–±–¥–∞—à–µ—à—å —Å–µ–≥–æ–¥–Ω—è)', emoji: 'ü§î' },
    { id: 108, text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞–º (–µ—Å–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–æ)', emoji: 'üìß' }
  ]);

  const [ideas, setIdeas] = useSupabaseStorage('ideas', [
    { id: 201, text: '–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –∞—Ñ–∏—à–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ‚Äî —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤', emoji: 'üí°' },
    { id: 202, text: '–ö–∞–Ω–∞–ª –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ ‚Äî –∑–∞–ø—É—Å–∫ (–†–æ—Å—Ç–æ–≤ –∏–ª–∏ –ü–∏—Ç–µ—Ä?)', emoji: 'üìä' }
  ]);

  const [newTaskText, setNewTaskText] = useState('');
  const [newTaskDate, setNewTaskDate] = useState(new Date().toISOString().split('T')[0]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-4xl mb-4">üìã</div>
          <div className="text-lg text-slate-600">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!isLoggedIn) {
    return <AuthForm onLogin={login} />;
  }

  // –§—É–Ω–∫—Ü–∏–∏
  const getAutoEmoji = (text: string) => {
    const lowerText = text.toLowerCase();
    if (lowerText.includes('–∫–∞—Ä–¥–∏–æ') || lowerText.includes('—Å–ø–æ—Ä—Ç')) return 'üèÉ‚Äç‚ôÇÔ∏è';
    if (lowerText.includes('–∑—É–±')) return 'ü¶∑';
    if (lowerText.includes('—Ä–∞–±–æ—Ç–∞') || lowerText.includes('–ø—Ä–æ–µ–∫—Ç')) return 'üíº';
    if (lowerText.includes('–∫—É–ø–∏—Ç—å')) return 'üõí';
    if (lowerText.includes('–µ–¥–∞')) return 'üç≥';
    if (lowerText.includes('–±–∞–π–∫') || lowerText.includes('–º–∞—à–∏–Ω–∞')) return 'üîß';
    if (lowerText.includes('–¥–æ–∫—É–º–µ–Ω—Ç')) return 'üìã';
    if (lowerText.includes('–≤—Ä–∞—á') || lowerText.includes('–≤–∏—Ç–∞–º–∏–Ω')) return 'üíä';
    if (lowerText.includes('–¥–µ–Ω—å–≥–∏') || lowerText.includes('–±—é–¥–∂–µ—Ç')) return 'üí∞';
    if (lowerText.includes('—É–±–æ—Ä') || lowerText.includes('—á–∏—Å—Ç')) return 'üßπ';
    if (lowerText.includes('–∑–≤–æ–Ω–æ–∫')) return 'üìû';
    if (lowerText.includes('–¥–æ–º')) return 'üè†';
    if (lowerText.includes('–ø–æ–¥—ä–µ–º') || lowerText.includes('—É—Ç—Ä')) return 'üåÖ';
    if (lowerText.includes('–≤–µ—á–µ—Ä')) return 'üåô';
    if (lowerText.includes('–∏–¥–µ—è')) return 'üí°';
    if (lowerText.includes('—É—á–∏—Ç—å') || lowerText.includes('–∫–Ω–∏–≥–∞')) return 'üìö';
    if (lowerText.includes('–∫–æ–º–ø—å—é—Ç–µ—Ä') || lowerText.includes('—Ä—Å—è')) return 'üíª';
    return 'üìù';
  };

  const getCurrentDate = () => {
    const date = new Date(selectedDate);
    return date.toLocaleDateString('ru-RU', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const formatDateShort = (dateStr: string) => {
    const date = new Date(dateStr);
    const today = new Date().toISOString().split('T')[0];
    const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    if (dateStr === today) return '–°–µ–≥–æ–¥–Ω—è';
    if (dateStr === tomorrow) return '–ó–∞–≤—Ç—Ä–∞';
    
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
  };

  const changeDate = (direction: number) => {
    const currentDate = new Date(selectedDate);
    const newDate = new Date(currentDate);
    newDate.setDate(currentDate.getDate() + direction);
    setSelectedDate(newDate.toISOString().split('T')[0]);
  };

  const toggleTask = (taskId: number, category: string) => {
    if (category === 'today') {
      setTasksByDate((prev: any) => ({
        ...prev,
        [selectedDate]: (prev[selectedDate] || []).map((task: any) => 
          task.id === taskId ? { ...task, completed: !task.completed } : task
        )
      }));
    } else if (category === 'noDeadline') {
      setNoDeadlineTasks((prev: any) => prev.map((task: any) => 
        task.id === taskId ? { ...task, completed: !task.completed } : task
      ));
    }
  };

  const deleteTask = (taskId: number, category: string) => {
    if (category === 'today') {
      setTasksByDate((prev: any) => ({
        ...prev,
        [selectedDate]: (prev[selectedDate] || []).filter((task: any) => task.id !== taskId)
      }));
    } else if (category === 'noDeadline') {
      setNoDeadlineTasks((prev: any) => prev.filter((task: any) => task.id !== taskId));
    } else if (category === 'ideas') {
      setIdeas((prev: any) => prev.filter((task: any) => task.id !== taskId));
    }
  };

  const addTask = (category: string) => {
    if (!newTaskText.trim()) return;
    
    const newTask: any = {
      id: Date.now(),
      text: newTaskText.trim(),
      emoji: getAutoEmoji(newTaskText.trim()),
      completed: false
    };

    if (category === 'today') {
      const targetDate = newTaskDate;
      setTasksByDate((prev: any) => ({
        ...prev,
        [targetDate]: [...(prev[targetDate] || []), newTask]
      }));
    } else if (category === 'noDeadline') {
      setNoDeadlineTasks((prev: any) => [...prev, newTask]);
    } else if (category === 'ideas') {
      setIdeas((prev: any) => [...prev, newTask]);
    }

    setNewTaskText('');
    setNewTaskDate(new Date().toISOString().split('T')[0]);
  };

  const currentDateTasks = tasksByDate[selectedDate] || [];
  const completedToday = currentDateTasks.filter((t: any) => t.completed).length;
  const totalToday = currentDateTasks.length;

  const tabs = [
    { id: 'today', label: '–°–µ–≥–æ–¥–Ω—è', icon: Calendar, count: currentDateTasks.filter((t: any) => !t.completed).length },
    { id: 'noDeadline', label: '–ë–µ–∑ —Å—Ä–æ–∫–∞', icon: Clock, count: noDeadlineTasks.length },
    { id: 'ideas', label: '–ò–¥–µ–∏', icon: Lightbulb, count: ideas.length }
  ];

  return (
    <div className="max-w-4xl mx-auto p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bg-slate-800 text-white p-6">
          <div className="flex justify-between items-start mb-4">
            <div>
              <h1 className="text-2xl font-bold mb-2">üìã –¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á</h1>
              <p className="text-slate-300">{getCurrentDate()}</p>
            </div>
            <div className="flex items-center gap-3">
              <div className="text-right">
                <div className="flex items-center gap-2 text-sm text-slate-300">
                  <User className="w-4 h-4" />
                  <code className="bg-slate-700 px-2 py-1 rounded text-xs">
                    {currentUserId}
                  </code>
                </div>
              </div>
              <button
                onClick={logout}
                className="p-2 hover:bg-slate-700 rounded-lg transition-colors"
                title="–í—ã–π—Ç–∏"
              >
                <LogOut className="w-4 h-4" />
              </button>
            </div>
          </div>
          
          {totalToday > 0 && (
            <div className="mt-3">
              <div className="flex justify-between text-sm mb-1">
                <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è</span>
                <span>{completedToday}/{totalToday}</span>
              </div>
              <div className="w-full bg-slate-700 rounded-full h-2">
                <div 
                  className="bg-green-400 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${totalToday > 0 ? (completedToday / totalToday) * 100 : 0}%` }}
                ></div>
              </div>
            </div>
          )}
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="flex border-b">
          {tabs.map(tab => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex-1 flex items-center justify-center gap-2 px-4 py-3 font-medium transition-colors ${
                  activeTab === tab.id
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 hover:bg-gray-50'
                }`}
              >
                <Icon className="w-4 h-4" />
                {tab.label}
                {tab.count > 0 && (
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    activeTab === tab.id ? 'bg-blue-500' : 'bg-gray-200'
                  }`}>
                    {tab.count}
                  </span>
                )}
              </button>
            );
          })}
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="p-6">
          {activeTab === 'today' && (
            <div>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <Calendar className="w-5 h-5 text-blue-600" />
                  <h2 className="text-xl font-semibold">–ó–∞–¥–∞—á–∏</h2>
                </div>
                
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => changeDate(-1)}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <ChevronLeft className="w-4 h-4" />
                  </button>
                  <div className="text-center min-w-[120px]">
                    <div className="font-medium">{formatDateShort(selectedDate)}</div>
                    <div className="text-xs text-gray-500">{getCurrentDate().split(',')[0]}</div>
                  </div>
                  <button
                    onClick={() => changeDate(1)}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <ChevronRight className="w-4 h-4" />
                  </button>
                </div>
              </div>
              
              <div className="space-y-2 mb-6">
                {currentDateTasks.map((task: any) => (
                  <TaskItem
                    key={task.id}
                    task={task}
                    onToggle={(id: number) => toggleTask(id, 'today')}
                    onDelete={(id: number) => deleteTask(id, 'today')}
                  />
                ))}
              </div>
              
              <AddTaskForm 
                onAdd={() => addTask('today')}
                text={newTaskText}
                setText={setNewTaskText}
                date={newTaskDate}
                setDate={setNewTaskDate}
              />
            </div>
          )}

          {activeTab === 'noDeadline' && (
            <div>
              <div className="flex items-center gap-2 mb-4">
                <Clock className="w-5 h-5 text-orange-600" />
                <h2 className="text-xl font-semibold">–ó–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ä–æ–∫–∞</h2>
              </div>
              
              <div className="space-y-2 mb-6">
                {noDeadlineTasks.map((task: any) => (
                  <TaskItem
                    key={task.id}
                    task={task}
                    onToggle={(id: number) => toggleTask(id, 'noDeadline')}
                    onDelete={(id: number) => deleteTask(id, 'noDeadline')}
                  />
                ))}
              </div>
              
              <AddTaskForm 
                onAdd={() => addTask('noDeadline')}
                text={newTaskText}
                setText={setNewTaskText}
                date={newTaskDate}
                setDate={setNewTaskDate}
              />
            </div>
          )}

          {activeTab === 'ideas' && (
            <div>
              <div className="flex items-center gap-2 mb-4">
                <Lightbulb className="w-5 h-5 text-yellow-600" />
                <h2 className="text-xl font-semibold">–ò–¥–µ–∏</h2>
              </div>
              
              <div className="space-y-2 mb-6">
                {ideas.map((task: any) => (
                  <TaskItem
                    key={task.id}
                    task={task}
                    canToggle={false}
                    onToggle={() => {}}
                    onDelete={(id: number) => deleteTask(id, 'ideas')}
                  />
                ))}
              </div>
              
              <AddTaskForm 
                onAdd={() => addTask('ideas')}
                text={newTaskText}
                setText={setNewTaskText}
                date={newTaskDate}
                setDate={setNewTaskDate}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
