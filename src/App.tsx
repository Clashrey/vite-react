import React, { useState, useCallback, useEffect } from 'react';
import { Plus, Trash2, Check, Calendar, Clock, Lightbulb, RefreshCw, ChevronLeft, ChevronRight, LogOut, User } from 'lucide-react';
import { saveUserData, loadUserData } from './lib/supabase';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const AuthForm = ({ onLogin }: { onLogin: (userId: string) => void }) => {
  const [userId, setUserId] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async () => {
    const trimmedId = userId.trim();
    if (!trimmedId) {
      alert('–í–≤–µ–¥–∏—Ç–µ User ID');
      return;
    }
    
    setIsLoading(true);
    try {
      localStorage.setItem('userId', trimmedId);
      await loadUserData();
      onLogin(trimmedId);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ User ID.');
      localStorage.removeItem('userId');
    }
    setIsLoading(false);
  };

  const handleRegister = async () => {
    setIsLoading(true);
    const newUserId = 'user_' + Math.random().toString(36).substr(2, 12);
    
    try {
      localStorage.setItem('userId', newUserId);
      await saveUserData({
        tasksByDate: {},
        noDeadlineTasks: [],
        ideas: [],
        dailyTasks: [],
        completedRegularTasks: {},
        regularTasksOrder: {}
      });
      onLogin(newUserId);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      localStorage.removeItem('userId');
    }
    setIsLoading(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center p-6">
      <div className="bg-white rounded-xl shadow-xl p-8 w-full max-w-md">
        <div className="text-center mb-8">
          <div className="text-4xl mb-4">üìã</div>
          <h1 className="text-2xl font-bold text-slate-800 mb-2">–¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á</h1>
          <p className="text-slate-600">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        </div>

        <div className="space-y-4">
          <button
            onClick={handleRegister}
            disabled={isLoading}
            className="w-full py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors font-medium text-lg"
          >
            {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...' : 'üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç'}
          </button>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-slate-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-slate-500">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</span>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-2">
              User ID –¥–ª—è –≤—Ö–æ–¥–∞
            </label>
            <input
              type="text"
              value={userId}
              onChange={(e) => setUserId(e.target.value)}
              placeholder="user_example123"
              className="w-full px-4 py-3 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              onKeyDown={(e) => e.key === 'Enter' && handleLogin()}
              disabled={isLoading}
            />
            <p className="text-xs text-slate-500 mt-1">
              –í–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            </p>
          </div>

          <button
            onClick={handleLogin}
            disabled={isLoading || !userId.trim()}
            className="w-full py-3 bg-slate-600 text-white rounded-lg hover:bg-slate-700 disabled:bg-slate-300 disabled:cursor-not-allowed transition-colors font-medium"
          >
            {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID'}
          </button>
        </div>

        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <h3 className="text-sm font-medium text-blue-800 mb-2">üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h3>
          <ul className="text-xs text-blue-700 space-y-1">
            <li>‚Ä¢ <strong>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?</strong> –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç" ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID</li>
            <li>‚Ä¢ <strong>–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</strong> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID –∏ –≤–æ–π–¥–∏—Ç–µ</li>
            <li>‚Ä¢ <strong>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω ID –Ω–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

// –•—É–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const useAuth = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      const storedUserId = localStorage.getItem('userId');
      if (storedUserId) {
        try {
          await loadUserData();
          setCurrentUserId(storedUserId);
          setIsLoggedIn(true);
        } catch (error) {
          localStorage.removeItem('userId');
        }
      }
      setIsLoading(false);
    };

    checkAuth();
  }, []); // –£–±—Ä–∞–ª–∏ loadUserData –∏–∑ dependencies

  const login = useCallback((userId: string) => {
    setCurrentUserId(userId);
    setIsLoggedIn(true);
  }, []);

  const logout = useCallback(() => {
    localStorage.clear();
    setCurrentUserId(null);
    setIsLoggedIn(false);
    window.location.reload();
  }, []);

  return { isLoggedIn, currentUserId, isLoading, login, logout };
};

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
const useSupabaseStorage = (key: string, defaultValue: any, isAuthorized: boolean) => {
  const [value, setValue] = useState(defaultValue);
  const [isLoaded, setIsLoaded] = useState(false);

  useEffect(() => {
    if (!isAuthorized) {
      setValue(defaultValue);
      setIsLoaded(true);
      return;
    }

    const loadData = async () => {
      try {
        const userData = await loadUserData();
        if (userData && userData[key]) {
          setValue(userData[key]);
        }
        setIsLoaded(true);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}:`, error);
        setIsLoaded(true);
      }
    };
    
    loadData();
  }, [key, isAuthorized]);

  const setStoredValue = useCallback(async (newValue: any) => {
    if (!isAuthorized) {
      setValue(newValue);
      return;
    }

    try {
      setValue((currentValue: any) => {
        const valueToStore = typeof newValue === 'function' ? newValue(currentValue) : newValue;
        
        setTimeout(async () => {
          try {
            const userData = await loadUserData() || {};
            userData[key] = valueToStore;
            await saveUserData(userData);
            console.log(`‚úÖ ${key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –æ–±–ª–∞–∫–µ`);
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${key}:`, error);
          }
        }, 100);
        
        return valueToStore;
      });
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${key}:`, error);
    }
  }, [key, isAuthorized]);

  return [value, setStoredValue, isLoaded];
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–æ—Ä–º –∏ —Å–ø–∏—Å–∫–æ–≤ - —É–ø—Ä–æ—â–µ–Ω—ã
const AddTaskForm = React.memo(({ category, onAddTask, newTaskText, setNewTaskText, newTaskDate, setNewTaskDate, newTaskFrequency, setNewTaskFrequency, newTaskDays, setNewTaskDays }: any) => {
  const handleKeyDown = (e: any) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      onAddTask();
    }
  };

  const handleTextChange = (e: any) => {
    setNewTaskText(e.target.value);
  };

  const toggleDay = (dayIndex: number) => {
    setNewTaskDays((prev: number[]) => 
      prev.includes(dayIndex) 
        ? prev.filter(d => d !== dayIndex)
        : [...prev, dayIndex].sort()
    );
  };

  const formatDateShort = (dateStr: string) => {
    const date = new Date(dateStr);
    const today = new Date().toISOString().split('T')[0];
    const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    if (dateStr === today) return '–°–µ–≥–æ–¥–Ω—è';
    if (dateStr === tomorrow) return '–ó–∞–≤—Ç—Ä–∞';
    
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
  };

  return (
    <div className="bg-gray-50 p-4 rounded-lg">
      <div className="flex gap-2 mb-2">
        <input
          type="text"
          value={newTaskText}
          onChange={handleTextChange}
          placeholder="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞..."
          className="flex-1 px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          onKeyDown={handleKeyDown}
          autoComplete="off"
        />
        {category === 'today' && (
          <input
            type="date"
            value={newTaskDate}
            onChange={(e) => setNewTaskDate(e.target.value)}
            className="px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        )}
        <button
          onClick={onAddTask}
          disabled={!newTaskText.trim()}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300 transition-colors"
        >
          <Plus className="w-4 h-4" />
        </button>
      </div>
      
      {category === 'regular' && (
        <div className="mt-3 space-y-3">
          <div>
            <label className="block text-sm font-medium mb-2">–ß–∞—Å—Ç–æ—Ç–∞:</label>
            <select 
              value={newTaskFrequency} 
              onChange={(e) => setNewTaskFrequency(e.target.value)}
              className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
              <option value="weekly">–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</option>
            </select>
          </div>
          
          {newTaskFrequency === 'weekly' && (
            <div>
              <label className="block text-sm font-medium mb-2">–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</label>
              <div className="flex gap-1">
                {['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'].map((day, index) => (
                  <button
                    key={index}
                    type="button"
                    onClick={() => toggleDay(index)}
                    className={`px-2 py-1 text-xs rounded transition-colors ${
                      newTaskDays.includes(index)
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {day}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
      
      {category === 'today' && newTaskDate !== new Date().toISOString().split('T')[0] && (
        <p className="text-sm text-blue-600 mt-2">
          ‚ûï –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {formatDateShort(newTaskDate)}
        </p>
      )}
    </div>
  );
});

const TaskList = React.memo(({ tasks, category, showCompleted = true, canToggle = true, onToggleTask, onDeleteTask, onDragStart, onDragOver, onDragLeave, onDrop, dragOverIndex }: any) => {
  const completed = tasks.filter((task: any) => task.completed);
  const active = showCompleted ? tasks : tasks.filter((task: any) => !task.completed);
  const displayTasks = showCompleted ? active : active.filter((task: any) => !task.completed);

  let regularTasks: any[] = [];
  let normalTasks = displayTasks;
  
  if (category === 'today') {
    regularTasks = displayTasks.filter((t: any) => t.isRegular);
    normalTasks = displayTasks.filter((t: any) => !t.isRegular);
  }

  return (
    <div className="space-y-2">
      {category === 'today' && regularTasks.length > 0 && (
        <div className="space-y-2">
          {regularTasks.map((task: any, index: number) => (
            <div
              key={task.id}
              draggable={true}
              onDragStart={(e) => onDragStart(e, task, index, 'regular')}
              onDragOver={(e) => onDragOver(e, index, 'regular')}
              onDragLeave={onDragLeave}
              onDrop={(e) => onDrop(e, index, 'regular')}
              className={`flex items-center gap-3 p-3 rounded-lg border transition-all cursor-move ${
                task.completed 
                  ? 'bg-green-50 border-green-200' 
                  : 'bg-blue-50 border-blue-200'
              } ${
                dragOverIndex?.index === index && dragOverIndex?.type === 'regular' ? 'border-blue-500 bg-blue-100' : ''
              }`}
            >
              <div className="flex-shrink-0 text-gray-400 cursor-move">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                  <circle cx="4" cy="4" r="1"/>
                  <circle cx="4" cy="8" r="1"/>
                  <circle cx="4" cy="12" r="1"/>
                  <circle cx="8" cy="4" r="1"/>
                  <circle cx="8" cy="8" r="1"/>
                  <circle cx="8" cy="12" r="1"/>
                  <circle cx="12" cy="4" r="1"/>
                  <circle cx="12" cy="8" r="1"/>
                  <circle cx="12" cy="12" r="1"/>
                </svg>
              </div>
              
              {canToggle && (
                <button
                  onClick={() => onToggleTask(task.id)}
                  className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors ${
                    task.completed
                      ? 'bg-green-500 border-green-500 text-white'
                      : 'border-gray-300 hover:border-blue-500'
                  }`}
                >
                  {task.completed && <Check className="w-4 h-4" />}
                </button>
              )}
              
              <span className="text-lg">{task.emoji}</span>
              
              <div className="flex-1">
                <div className="flex items-center gap-2">
                  <span className={`${task.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>
                    {task.text}
                  </span>
                  <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                    —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è
                  </span>
                </div>
                {task.frequency && (
                  <div className="text-xs text-blue-600 mt-1">
                    {task.frequency === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' : 
                     task.frequency === 'weekly' ? `–ü–æ ${task.days?.map((d: number) => ['–í—Å','–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±'][d]).join(', ')}` : 
                     task.frequency}
                  </div>
                )}
              </div>
              
              <button
                onClick={() => onDeleteTask(task.id)}
                className="flex-shrink-0 p-1 text-gray-400 hover:text-red-500 transition-colors"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            </div>
          ))}
        </div>
      )}

      {(category !== 'today' ? displayTasks : normalTasks).map((task: any, index: number) => {
        return (
          <div
            key={task.id}
            draggable={true}
            onDragStart={(e) => onDragStart(e, task, index, 'normal')}
            onDragOver={(e) => onDragOver(e, index, 'normal')}
            onDragLeave={onDragLeave}
            onDrop={(e) => onDrop(e, index, 'normal')}
            className={`flex items-center gap-3 p-3 rounded-lg border transition-all cursor-move ${
              task.completed 
                ? 'bg-green-50 border-green-200' 
                : task.isRegular 
                  ? 'bg-blue-50 border-blue-200'
                  : 'bg-white border-gray-200 hover:shadow-sm'
            } ${
              dragOverIndex?.index === index && dragOverIndex?.type === 'normal' ? 'border-blue-500 bg-blue-50' : ''
            }`}
          >
            <div className="flex-shrink-0 text-gray-400 cursor-move">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                <circle cx="4" cy="4" r="1"/>
                <circle cx="4" cy="8" r="1"/>
                <circle cx="4" cy="12" r="1"/>
                <circle cx="8" cy="4" r="1"/>
                <circle cx="8" cy="8" r="1"/>
                <circle cx="8" cy="12" r="1"/>
                <circle cx="12" cy="4" r="1"/>
                <circle cx="12" cy="8" r="1"/>
                <circle cx="12" cy="12" r="1"/>
              </svg>
            </div>
            
            {canToggle && (
              <button
                onClick={() => onToggleTask(task.id)}
                className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors ${
                  task.completed
                    ? 'bg-green-500 border-green-500 text-white'
                    : 'border-gray-300 hover:border-blue-500'
                }`}
              >
                {task.completed && <Check className="w-4 h-4" />}
              </button>
            )}
            
            <span className="text-lg">{task.emoji}</span>
            
            <div className="flex-1">
              <div className="flex items-center gap-2">
                <span className={`${task.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>
                  {task.text}
                </span>
                {task.isRegular && (
                  <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                    —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è
                  </span>
                )}
              </div>
              {task.frequency && (
                <div className="text-xs text-blue-600 mt-1">
                  {task.frequency === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' : 
                   task.frequency === 'weekly' ? `–ü–æ ${task.days?.map((d: number) => ['–í—Å','–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±'][d]).join(', ')}` : 
                   task.frequency}
                </div>
              )}
            </div>
            
            <button
              onClick={() => onDeleteTask(task.id)}
              className="flex-shrink-0 p-1 text-gray-400 hover:text-red-500 transition-colors"
            >
              <Trash2 className="w-4 h-4" />
            </button>
          </div>
        );
      })}
      
      {showCompleted && completed.length > 0 && displayTasks.some((t: any) => !t.completed) && (
        <div className="border-t pt-3 mt-4">
          <p className="text-sm text-gray-500 mb-2">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ({completed.length})</p>
        </div>
      )}
    </div>
  );
});

const MiniCalendar = React.memo(({ selectedDate, tasksByDate, onSelectDate }: any) => {
  const today = new Date();
  const currentMonth = today.getMonth();
  const currentYear = today.getFullYear();
  const firstDay = new Date(currentYear, currentMonth, 1).getDay();
  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
  const todayDate = today.getDate();
  const selectedDateObj = new Date(selectedDate);
  const selectedDay = selectedDateObj.getDate();
  const selectedMonth = selectedDateObj.getMonth();
  const selectedYear = selectedDateObj.getFullYear();

  return (
    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 mb-6">
      <div className="grid grid-cols-7 gap-1 text-center">
        {['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'].map(day => (
          <div key={day} className="text-xs font-medium text-gray-600 py-1">{day}</div>
        ))}
        
        {Array.from({ length: calendarData.firstDay }, (_, i) => (
          <div key={`empty-${i}`} className="py-1"></div>
        ))}
        
        {Array.from({ length: calendarData.daysInMonth }, (_, i) => {
          const day = i + 1;
          const isToday = day === calendarData.todayDate && 
                         calendarData.currentMonth === calendarData.currentMonth && 
                         calendarData.currentYear === calendarData.currentYear;
          const isSelected = day === calendarData.selectedDay && 
                           calendarData.currentMonth === calendarData.selectedMonth && 
                           calendarData.currentYear === calendarData.selectedYear;
          const dateStr = new Date(calendarData.currentYear, calendarData.currentMonth, day).toISOString().split('T')[0];
          const hasTasks = tasksByDate[dateStr] && tasksByDate[dateStr].length > 0;
          
          return (
            <button
              key={day}
              onClick={() => onSelectDate(dateStr)}
              className={`py-1 px-1 text-xs rounded transition-colors relative ${
                isSelected 
                  ? 'bg-blue-600 text-white' 
                  : isToday
                    ? 'bg-blue-100 text-blue-800 font-medium'
                    : 'hover:bg-blue-50'
              }`}
            >
              {day}
              {hasTasks && (
                <div className={`absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 rounded-full ${
                  isSelected ? 'bg-white' : 'bg-blue-500'
                }`}></div>
              )}
            </button>
          );
        })}
      </div>
    </div>
  );
});

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function App() {
  const { isLoggedIn, currentUserId, isLoading, login, logout } = useAuth();
  
  const [activeTab, setActiveTab] = useState('today');
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  
  const [tasksByDate, setTasksByDate] = useSupabaseStorage('tasksByDate', {
    [new Date().toISOString().split('T')[0]]: [
      { id: 1, text: '–ü–æ–¥—ä–µ–º', completed: true, emoji: 'üåÖ' },
      { id: 2, text: '–£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞', completed: true, emoji: '‚òÄÔ∏è' },
      { id: 3, text: '–ö–∞—Ä–¥–∏–æ + –±–∞—Å—Å–µ–π–Ω', completed: true, emoji: 'üèä‚Äç‚ôÇÔ∏è' },
      { id: 4, text: '–ê—à–≤–∞–≥–∞–Ω–¥–∞ + –≤–∏—Ç–∞–º–∏–Ω D', completed: false, emoji: 'üíä' },
      { id: 5, text: '–ü–æ—Å—Ç—ã –¥–ª—è –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—è', completed: false, emoji: 'üè†' },
      { id: 6, text: '–ü–æ—Å—Ç—ã –¥–ª—è –†–æ—Å—Ç–æ–≤–∞', completed: false, emoji: 'üè†' },
      { id: 7, text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –†–°–Ø', completed: false, emoji: 'üíª' },
      { id: 8, text: '–ó–∞—è–≤–ª–µ–Ω–∏–µ ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', completed: false, emoji: 'üìã' }
    ]
  }, isLoggedIn);

  const [noDeadlineTasks, setNoDeadlineTasks] = useSupabaseStorage('noDeadlineTasks', [
    { id: 101, text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ –∑–∞–ø—É—Å–∫—É —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª-–∞—Ñ–∏—à—É', emoji: 'üì∫' },
    { id: 102, text: '–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –†–ö–ù –≤ –¢—é–º–µ–Ω–∏ (–∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å)', emoji: '‚öôÔ∏è' },
    { id: 103, text: '–£–∑–Ω–∞—Ç—å –ø—Ä–æ –ø–æ—á–∏–Ω–∫—É –±–∞–π–∫–∞', emoji: 'üèçÔ∏è' },
    { id: 104, text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É', emoji: 'ü¶∑' },
    { id: 105, text: '–°–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã (–æ—Ä–∏–µ–Ω—Ç–∏—Ä ‚Äî 4 –∏—é–Ω—è)', emoji: 'üß™' },
    { id: 106, text: '–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Å —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º–∏', emoji: 'üíº' },
    { id: 107, text: '–†–µ—à–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –†–æ—Å—Ç–æ–≤–æ–º (–µ—Å–ª–∏ –Ω–µ –æ–±–¥–∞—à–µ—à—å —Å–µ–≥–æ–¥–Ω—è)', emoji: 'ü§î' },
    { id: 108, text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞–º (–µ—Å–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–æ)', emoji: 'üìß' }
  ], isLoggedIn);

  const [ideas, setIdeas] = useSupabaseStorage('ideas', [
    { id: 201, text: '–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –∞—Ñ–∏—à–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ‚Äî —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤', emoji: 'üí°' },
    { id: 202, text: '–ö–∞–Ω–∞–ª –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ ‚Äî –∑–∞–ø—É—Å–∫ (–†–æ—Å—Ç–æ–≤ –∏–ª–∏ –ü–∏—Ç–µ—Ä?)', emoji: 'üìä' }
  ], isLoggedIn);

  const [dailyTasks, setDailyTasks] = useSupabaseStorage('dailyTasks', [
    { id: 301, text: '–£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π ‚Äî –±–æ—Ä–æ–¥–∞, –Ω–æ–≥—Ç–∏, –Ω–æ—Å, –±—Ä–æ–≤–∏', emoji: 'üßî', frequency: 'weekly', days: [0] },
    { id: 302, text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç', emoji: 'üìã', frequency: 'weekly', days: [0] },
    { id: 303, text: '–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã –≤–µ—á–µ—Ä–æ–º', emoji: 'ü¶∑', frequency: 'daily', days: [] },
    { id: 304, text: '–ú–∞–≥–Ω–∏–π + —É—Ä—Å–æ—Å–∞–Ω –≤–µ—á–µ—Ä–æ–º', emoji: 'üåô', frequency: 'daily', days: [] }
  ], isLoggedIn);

  const [completedRegularTasks, setCompletedRegularTasks] = useSupabaseStorage('completedRegularTasks', {}, isLoggedIn);
  const [regularTasksOrder, setRegularTasksOrder] = useSupabaseStorage('regularTasksOrder', {}, isLoggedIn);

  const [draggedItem, setDraggedItem] = useState<any>(null);
  const [dragOverIndex, setDragOverIndex] = useState<any>(null);
  const [newTaskText, setNewTaskText] = useState('');
  const [newTaskDate, setNewTaskDate] = useState(new Date().toISOString().split('T')[0]);
  const [newTaskFrequency, setNewTaskFrequency] = useState('daily');
  const [newTaskDays, setNewTaskDays] = useState<number[]>([]);
  const [showCalendar, setShowCalendar] = useState(false);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-4xl mb-4">üìã</div>
          <div className="text-lg text-slate-600">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!isLoggedIn) {
    return <AuthForm onLogin={login} />;
  }

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - —É–ø—Ä–æ—â–µ–Ω–æ –±–µ–∑ useMemo
  const getTodayRegularTasks = (dateStr: string) => {
    const date = new Date(dateStr);
    const dayOfWeek = date.getDay();
    
    const applicableTasks = dailyTasks
      .filter((task: any) => {
        if (task.frequency === 'daily') return true;
        if (task.frequency === 'weekly') return task.days.includes(dayOfWeek);
        return false;
      })
      .map((task: any) => ({
        ...task,
        completed: completedRegularTasks[dateStr]?.includes(task.id) || false,
        isRegular: true
      }));

    const savedOrder = regularTasksOrder[dateStr];
    if (savedOrder && savedOrder.length > 0) {
      const orderedTasks: any[] = [];
      savedOrder.forEach((taskId: number) => {
        const task = applicableTasks.find((t: any) => t.id === taskId);
        if (task) orderedTasks.push(task);
      });
      applicableTasks.forEach((task: any) => {
        if (!savedOrder.includes(task.id)) {
          orderedTasks.push(task);
        }
      });
      return orderedTasks;
    }
    
    return applicableTasks;
  };

  const getCurrentDateTasks = () => {
    const regularTasks = getTodayRegularTasks(selectedDate);
    const normalTasks = tasksByDate[selectedDate] || [];
    return [...regularTasks, ...normalTasks];
  };

  const currentDateTasks = getCurrentDateTasks();
  
  const tabs = [
    { id: 'today', label: '–°–µ–≥–æ–¥–Ω—è', icon: Calendar, count: currentDateTasks.filter((t: any) => !t.completed).length },
    { id: 'noDeadline', label: '–ë–µ–∑ —Å—Ä–æ–∫–∞', icon: Clock, count: noDeadlineTasks.length },
    { id: 'ideas', label: '–ò–¥–µ–∏', icon: Lightbulb, count: ideas.length },
    { id: 'regular', label: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ', icon: RefreshCw, count: dailyTasks.length }
  ];

  const completedToday = currentDateTasks.filter((t: any) => t.completed).length;
  const totalToday = currentDateTasks.length;

  // –§—É–Ω–∫—Ü–∏–∏ - —É–ø—Ä–æ—â–µ–Ω—ã –±–µ–∑ useCallback
  const getAutoEmoji = (text: string) => {
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('–∫–∞—Ä–¥–∏–æ') || lowerText.includes('—Å–ø–æ—Ä—Ç') || lowerText.includes('–±–∞—Å—Å–µ–π–Ω') || 
        lowerText.includes('–∑–∞–ª') || lowerText.includes('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞') || lowerText.includes('–±–µ–≥')) {
      return 'üèÉ‚Äç‚ôÇÔ∏è';
    }
    
    if (lowerText.includes('–∑—É–±') || lowerText.includes('—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥')) {
      return 'ü¶∑';
    }
    
    if (lowerText.includes('—Ä–∞–±–æ—Ç–∞') || lowerText.includes('–ø—Ä–æ–µ–∫—Ç') || lowerText.includes('–∫–∞–Ω–∞–ª') || 
        lowerText.includes('–ø–æ—Å—Ç') || lowerText.includes('–∫–æ–Ω—Ç–µ–Ω—Ç') || lowerText.includes('—Ä–µ–∫–ª–∞–º–∞')) {
      return 'üíº';
    }
    
    if (lowerText.includes('–∫—É–ø–∏—Ç—å') || lowerText.includes('–º–∞–≥–∞–∑–∏–Ω') || lowerText.includes('–ø–æ–∫—É–ø–∫')) {
      return 'üõí';
    }
    
    if (lowerText.includes('–≥–æ—Ç–æ–≤–∏—Ç—å') || lowerText.includes('–µ–¥–∞') || lowerText.includes('–∫—É—Ö–Ω—è') || 
        lowerText.includes('–∑–∞–≤—Ç—Ä–∞–∫') || lowerText.includes('–æ–±–µ–¥') || lowerText.includes('—É–∂–∏–Ω')) {
      return 'üç≥';
    }
    
    if (lowerText.includes('–º–∞—à–∏–Ω–∞') || lowerText.includes('–±–∞–π–∫') || lowerText.includes('—Ä–µ–º–æ–Ω—Ç') || 
        lowerText.includes('—Å–µ—Ä–≤–∏—Å') || lowerText.includes('–ø–æ—á–∏–Ω–∫')) {
      return 'üîß';
    }
    
    if (lowerText.includes('–¥–æ–∫—É–º–µ–Ω—Ç') || lowerText.includes('–∑–∞—è–≤–ª–µ–Ω–∏–µ') || lowerText.includes('–±—É–º–∞–≥') || 
        lowerText.includes('—Å–ø—Ä–∞–≤–∫') || lowerText.includes('–æ—Ñ–æ—Ä–º')) {
      return 'üìã';
    }
    
    if (lowerText.includes('–≤—Ä–∞—á') || lowerText.includes('–∞–Ω–∞–ª–∏–∑') || lowerText.includes('–±–æ–ª—å–Ω–∏—Ü') || 
        lowerText.includes('–ª–µ—á–µ–Ω–∏–µ') || lowerText.includes('—Ç–∞–±–ª–µ—Ç–∫') || lowerText.includes('–≤–∏—Ç–∞–º–∏–Ω') || 
        lowerText.includes('–º–∞–≥–Ω–∏–π') || lowerText.includes('–∞—à–≤–∞–≥–∞–Ω–¥–∞') || lowerText.includes('—É—Ä—Å–æ—Å–∞–Ω')) {
      return 'üíä';
    }
    
    if (lowerText.includes('–¥–µ–Ω—å–≥–∏') || lowerText.includes('–±—é–¥–∂–µ—Ç') || lowerText.includes('—Ñ–∏–Ω–∞–Ω—Å') || 
        lowerText.includes('–∑–∞—Ä–ø–ª–∞—Ç') || lowerText.includes('–ø–ª–∞—Ç–µ–∂') || lowerText.includes('—Å—á–µ—Ç')) {
      return 'üí∞';
    }
    
    if (lowerText.includes('—É–±–æ—Ä') || lowerText.includes('—á–∏—Å—Ç') || lowerText.includes('–º—ã—Ç—å') || 
        lowerText.includes('–ø–æ—Ä—è–¥–æ–∫')) {
      return 'üßπ';
    }
    
    if (lowerText.includes('–∑–≤–æ–Ω–æ–∫') || lowerText.includes('–∑–≤–æ–Ω–∏—Ç—å') || lowerText.includes('—Å–≤—è–∑–∞—Ç—å') || 
        lowerText.includes('–ø–æ–∑–≤–æ–Ω–∏—Ç—å') || lowerText.includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) {
      return 'üìû';
    }
    
    if (lowerText.includes('–¥–æ–º') || lowerText.includes('–∫–≤–∞—Ä—Ç–∏—Ä') || lowerText.includes('—Ä–µ–º–æ–Ω—Ç –¥–æ–º–∞') || 
        lowerText.includes('–∏–Ω—Ç–µ—Ä—å–µ—Ä')) {
      return 'üè†';
    }
    
    if (lowerText.includes('–ø–æ–¥—ä–µ–º') || lowerText.includes('–≤—Å—Ç–∞—Ç—å') || lowerText.includes('—É—Ç—Ä')) {
      return 'üåÖ';
    }
    
    if (lowerText.includes('–≤–µ—á–µ—Ä') || lowerText.includes('–Ω–æ—á—å') || lowerText.includes('—Å–æ–Ω')) {
      return 'üåô';
    }
    
    if (lowerText.includes('–∏–¥–µ—è') || lowerText.includes('–∫–æ–Ω—Ü–µ–ø—Ü–∏—è') || lowerText.includes('–ø–ª–∞–Ω') || 
        lowerText.includes('—Å—Ç—Ä–∞—Ç–µ–≥–∏—è') || lowerText.includes('–∫—Ä–µ–∞—Ç–∏–≤')) {
      return 'üí°';
    }
    
    if (lowerText.includes('—É—á–∏—Ç—å') || lowerText.includes('–∏–∑—É—á–∞—Ç—å') || lowerText.includes('–∫—É—Ä—Å') || 
        lowerText.includes('–∫–Ω–∏–≥–∞') || lowerText.includes('—á–∏—Ç–∞—Ç—å')) {
      return 'üìö';
    }
    
    if (lowerText.includes('–∫–æ–º–ø—å—é—Ç–µ—Ä') || lowerText.includes('—Å–∞–π—Ç') || lowerText.includes('–∫–æ–¥') || 
        lowerText.includes('–ø—Ä–æ–≥—Ä–∞–º–º') || lowerText.includes('—Ä—Å—è') || lowerText.includes('—Ä–µ–∫–ª–∞–º')) {
      return 'üíª';
    }
    
    return 'üìù';
  };

  const getCurrentDate = () => {
    const date = new Date(selectedDate);
    return date.toLocaleDateString('ru-RU', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const formatDateShort = (dateStr: string) => {
    const date = new Date(dateStr);
    const today = new Date().toISOString().split('T')[0];
    const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    if (dateStr === today) return '–°–µ–≥–æ–¥–Ω—è';
    if (dateStr === tomorrow) return '–ó–∞–≤—Ç—Ä–∞';
    
    return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
  };

  const changeDate = (direction: number) => {
    const currentDate = new Date(selectedDate);
    const newDate = new Date(currentDate);
    newDate.setDate(currentDate.getDate() + direction);
    setSelectedDate(newDate.toISOString().split('T')[0]);
  };

  const toggleTask = (taskId: number, category: string) => {
    if (category === 'today') {
      const task = currentDateTasks.find((t: any) => t.id === taskId);
      
      if (task && task.isRegular) {
        setCompletedRegularTasks((prev: any) => {
          const dateCompleted = prev[selectedDate] || [];
          const isCompleted = dateCompleted.includes(taskId);
          
          return {
            ...prev,
            [selectedDate]: isCompleted 
              ? dateCompleted.filter((id: number) => id !== taskId)
              : [...dateCompleted, taskId]
          };
        });
      } else {
        setTasksByDate((prev: any) => ({
          ...prev,
          [selectedDate]: (prev[selectedDate] || []).map((task: any) => 
            task.id === taskId ? { ...task, completed: !task.completed } : task
          )
        }));
      }
    } else if (category === 'noDeadline') {
      setNoDeadlineTasks((prev: any) => prev.map((task: any) => 
        task.id === taskId ? { ...task, completed: !task.completed } : task
      ));
    }
  };

  const deleteTask = (taskId: number, category: string) => {
    if (category === 'today') {
      const task = currentDateTasks.find((t: any) => t.id === taskId);
      
      if (task && task.isRegular) {
        alert('–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ"');
        return;
      } else {
        setTasksByDate((prev: any) => ({
          ...prev,
          [selectedDate]: (prev[selectedDate] || []).filter((task: any) => task.id !== taskId)
        }));
      }
    } else if (category === 'noDeadline') {
      setNoDeadlineTasks((prev: any) => prev.filter((task: any) => task.id !== taskId));
    } else if (category === 'ideas') {
      setIdeas((prev: any) => prev.filter((task: any) => task.id !== taskId));
    } else if (category === 'regular') {
      setDailyTasks((prev: any) => prev.filter((task: any) => task.id !== taskId));
    }
  };

  const addTask = (category: string) => {
    if (!newTaskText.trim()) return;
    
    const newTask: any = {
      id: Date.now(),
      text: newTaskText.trim(),
      emoji: getAutoEmoji(newTaskText.trim()),
      completed: false
    };

    if (category === 'today') {
      const targetDate = newTaskDate;
      setTasksByDate((prev: any) => ({
        ...prev,
        [targetDate]: [...(prev[targetDate] || []), newTask]
      }));
    } else if (category === 'regular') {
      newTask.frequency = newTaskFrequency;
      newTask.days = newTaskDays;
      setDailyTasks((prev: any) => [...prev, newTask]);
    } else if (category === 'noDeadline') {
      setNoDeadlineTasks((prev: any) => [...prev, newTask]);
    } else if (category === 'ideas') {
      setIdeas((prev: any) => [...prev, newTask]);
    }

    setNewTaskText('');
    setNewTaskDate(new Date().toISOString().split('T')[0]);
    setNewTaskFrequency('daily');
    setNewTaskDays([]);
  };

  // Drag and drop
  const handleDragStart = (e: any, task: any, index: number, type: string) => {
    setDraggedItem({ task, index, type });
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e: any, index: number, type: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverIndex({ index, type });
  };

  const handleDragLeave = () => {
    setDragOverIndex(null);
  };

  const handleDrop = (e: any, dropIndex: number, dropType: string) => {
    e.preventDefault();
    setDragOverIndex(null);
    
    if (!draggedItem || draggedItem.type !== dropType) return;
    
    const dragIndex = draggedItem.index;
    if (dragIndex === dropIndex) return;

    const reorderArray = (array: any[]) => {
      const newArray = [...array];
      const [removed] = newArray.splice(dragIndex, 1);
      newArray.splice(dropIndex, 0, removed);
      return newArray;
    };

    if (dropType === 'regular') {
      const regularTasks = getTodayRegularTasks(selectedDate);
      const reorderedRegularTasks = reorderArray(regularTasks);
      const newOrder = reorderedRegularTasks.map((task: any) => task.id);
      
      setRegularTasksOrder((prev: any) => ({
        ...prev,
        [selectedDate]: newOrder
      }));
    } else if (dropType === 'normal') {
      if (activeTab === 'today') {
        const normalTasks = (tasksByDate[selectedDate] || []).filter((t: any) => !t.isRegular);
        const reorderedNormalTasks = reorderArray(normalTasks);
        setTasksByDate((prev: any) => ({
          ...prev,
          [selectedDate]: reorderedNormalTasks
        }));
      } else if (activeTab === 'noDeadline') {
        setNoDeadlineTasks(reorderArray(noDeadlineTasks));
      } else if (activeTab === 'ideas') {
        setIdeas(reorderArray(ideas));
      } else if (activeTab === 'regular') {
        setDailyTasks(reorderArray(dailyTasks));
      }
    }

    setDraggedItem(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const handleToggleTask = (category: string) => (taskId: number) => {
    toggleTask(taskId, category);
  };

  const handleDeleteTask = (category: string) => (taskId: number) => {
    deleteTask(taskId, category);
  };

  const handleSelectDate = (dateStr: string) => {
    setSelectedDate(dateStr);
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º */}
        <div className="bg-slate-800 text-white p-6">
          <div className="flex justify-between items-start mb-4">
            <div>
              <h1 className="text-2xl font-bold mb-2">üìã –¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á</h1>
              <p className="text-slate-300">{getCurrentDate()}</p>
            </div>
            <div className="flex items-center gap-3">
              <div className="text-right">
                <div className="flex items-center gap-2 text-sm text-slate-300">
                  <User className="w-4 h-4" />
                  <code className="bg-slate-700 px-2 py-1 rounded text-xs">
                    {currentUserId}
                  </code>
                </div>
              </div>
              <button
                onClick={logout}
                className="p-2 hover:bg-slate-700 rounded-lg transition-colors"
                title="–í—ã–π—Ç–∏"
              >
                <LogOut className="w-4 h-4" />
              </button>
            </div>
          </div>
          
          {totalToday > 0 && (
            <div className="mt-3">
              <div className="flex justify-between text-sm mb-1">
                <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è</span>
                <span>{completedToday}/{totalToday}</span>
              </div>
              <div className="w-full bg-slate-700 rounded-full h-2">
                <div 
                  className="bg-green-400 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${totalToday > 0 ? (completedToday / totalToday) * 100 : 0}%` }}
                ></div>
              </div>
            </div>
          )}
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="flex border-b">
          {tabs.map(tab => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex-1 flex items-center justify-center gap-2 px-4 py-3 font-medium transition-colors ${
                  activeTab === tab.id
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 hover:bg-gray-50'
                }`}
              >
                <Icon className="w-4 h-4" />
                {tab.label}
                {tab.count > 0 && (
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    activeTab === tab.id ? 'bg-blue-500' : 'bg-gray-200'
                  }`}>
                    {tab.count}
                  </span>
                )}
              </button>
            );
          })}
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="p-6">
          {activeTab === 'regular' && (
            <div>
              <div className="flex items-center gap-2 mb-4">
                <RefreshCw className="w-5 h-5 text-green-600" />
                <h2 className="text-xl font-semibold">–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏</h2>
              </div>
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
                <p className="text-blue-800 text-sm">
                  ‚ÑπÔ∏è –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏. –û–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–µ–≥–æ–¥–Ω—è" —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
                </p>
              </div>
              <TaskList 
                tasks={dailyTasks} 
                category="regular" 
                canToggle={false}
                onToggleTask={handleToggleTask('regular')}
                onDeleteTask={handleDeleteTask('regular')}
                onDragStart={handleDragStart}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                dragOverIndex={dragOverIndex}
              />
              <div className="mt-6">
                <AddTaskForm 
                  category="regular"
                  onAddTask={() => addTask('regular')}
                  newTaskText={newTaskText}
                  setNewTaskText={setNewTaskText}
                  newTaskDate={newTaskDate}
                  setNewTaskDate={setNewTaskDate}
                  newTaskFrequency={newTaskFrequency}
                  setNewTaskFrequency={setNewTaskFrequency}
                  newTaskDays={newTaskDays}
                  setNewTaskDays={setNewTaskDays}
                />
              </div>
            </div>
          )}

          {activeTab === 'today' && (
            <div>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <Calendar className="w-5 h-5 text-blue-600" />
                  <h2 className="text-xl font-semibold">–ó–∞–¥–∞—á–∏</h2>
                </div>
                
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setShowCalendar(!showCalendar)}
                    className={`px-3 py-2 rounded-lg transition-colors text-sm ${
                      showCalendar 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                    }`}
                  >
                    üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å
                  </button>
                  
                  <button
                    onClick={() => changeDate(-1)}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <ChevronLeft className="w-4 h-4" />
                  </button>
                  <div className="text-center min-w-[120px]">
                    <div className="font-medium">{formatDateShort(selectedDate)}</div>
                    <div className="text-xs text-gray-500">{getCurrentDate().split(',')[0]}</div>
                  </div>
                  <button
                    onClick={() => changeDate(1)}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <ChevronRight className="w-4 h-4" />
                  </button>
                </div>
              </div>
              
              {showCalendar && (
                <MiniCalendar 
                  selectedDate={selectedDate}
                  tasksByDate={tasksByDate}
                  onSelectDate={handleSelectDate}
                />
              )}
              
              {currentDateTasks.some((t: any) => t.isRegular) && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
                  <p className="text-blue-800 text-sm">
                    üîÑ –°–∏–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ, –ø–æ–¥—Ç—è–Ω—É–ª–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ò—Ö –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –º–µ–∂–¥—É —Å–æ–±–æ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ".
                  </p>
                </div>
              )}
              
              <TaskList 
                tasks={currentDateTasks} 
                category="today" 
                onToggleTask={handleToggleTask('today')}
                onDeleteTask={handleDeleteTask('today')}
                onDragStart={handleDragStart}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                dragOverIndex={dragOverIndex}
              />
              <div className="mt-6">
                <AddTaskForm 
                  category="today"
                  onAddTask={() => addTask('today')}
                  newTaskText={newTaskText}
                  setNewTaskText={setNewTaskText}
                  newTaskDate={newTaskDate}
                  setNewTaskDate={setNewTaskDate}
                  newTaskFrequency={newTaskFrequency}
                  setNewTaskFrequency={setNewTaskFrequency}
                  newTaskDays={newTaskDays}
                  setNewTaskDays={setNewTaskDays}
                />
              </div>
            </div>
          )}

          {activeTab === 'noDeadline' && (
            <div>
              <div className="flex items-center gap-2 mb-4">
                <Clock className="w-5 h-5 text-orange-600" />
                <h2 className="text-xl font-semibold">–ó–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ä–æ–∫–∞</h2>
              </div>
              <TaskList 
                tasks={noDeadlineTasks} 
                category="noDeadline" 
                onToggleTask={handleToggleTask('noDeadline')}
                onDeleteTask={handleDeleteTask('noDeadline')}
                onDragStart={handleDragStart}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                dragOverIndex={dragOverIndex}
              />
              <div className="mt-6">
                <AddTaskForm 
                  category="noDeadline"
                  onAddTask={() => addTask('noDeadline')}
                  newTaskText={newTaskText}
                  setNewTaskText={setNewTaskText}
                  newTaskDate={newTaskDate}
                  setNewTaskDate={setNewTaskDate}
                  newTaskFrequency={newTaskFrequency}
                  setNewTaskFrequency={setNewTaskFrequency}
                  newTaskDays={newTaskDays}
                  setNewTaskDays={setNewTaskDays}
                />
              </div>
            </div>
          )}

          {activeTab === 'ideas' && (
            <div>
              <div className="flex items-center gap-2 mb-4">
                <Lightbulb className="w-5 h-5 text-yellow-600" />
                <h2 className="text-xl font-semibold">–ò–¥–µ–∏ / –í –ø—Ä–æ—Ü–µ—Å—Å–µ</h2>
              </div>
              <TaskList 
                tasks={ideas} 
                category="ideas" 
                canToggle={false} 
                onToggleTask={handleToggleTask('ideas')}
                onDeleteTask={handleDeleteTask('ideas')}
                onDragStart={handleDragStart}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                dragOverIndex={dragOverIndex}
              />
              <div className="mt-6">
                <AddTaskForm 
                  category="ideas"
                  onAddTask={() => addTask('ideas')}
                  newTaskText={newTaskText}
                  setNewTaskText={setNewTaskText}
                  newTaskDate={newTaskDate}
                  setNewTaskDate={setNewTaskDate}
                  newTaskFrequency={newTaskFrequency}
                  setNewTaskFrequency={setNewTaskFrequency}
                  newTaskDays={newTaskDays}
                  setNewTaskDays={setNewTaskDays}
                />
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
